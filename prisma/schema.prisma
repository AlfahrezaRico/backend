generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                 String    @id @default(uuid()) @db.Uuid
  created_at         DateTime  @default(now()) @db.Timestamptz(6)
  username           String    @unique @db.VarChar(255)
  email              String    @unique @db.VarChar(255)
  role               String    @db.VarChar(50)
  employee_id        String?   @db.Uuid
  last_login         DateTime? @db.Timestamptz(6)
  encrypted_password String?   @db.Text

  employee              employees?        @relation("users_employee_idToemployees", fields: [employee_id], references: [id])
  employees             employees[]       @relation("employees_user_idTousers")
  approvedLeaveRequests leave_requests[]  @relation("ApprovedByUser")
  rejectedLeaveRequests leave_requests[]  @relation("RejectedByUser")
  systemLogs            system_logs[]     @relation("UserSystemLogs")
  systemSettings        system_settings[] @relation("UserSystemSettings")
  sessions              session[]
}

model departemen {
  id        String   @id @default(uuid()) @db.Uuid
  nama      String   @unique @db.VarChar(100)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  employees employees[]
  nik_configs department_nik_config[]
}

model employees {
  id                  String    @id @default(uuid()) @db.Uuid
  created_at          DateTime  @default(now()) @db.Timestamptz(6)
  user_id             String?   @db.Uuid
  first_name          String    @db.VarChar(255)
  last_name           String    @db.VarChar(255)
  email               String    @unique @db.VarChar(255)
  phone_number        String?   @db.VarChar(20)
  position            String    @db.VarChar(255)
  hire_date           DateTime  @db.Date
  bank_account_number String?   @db.VarChar(50)
  address             String?
  date_of_birth       DateTime? @db.Date
  bank_name           String?   @db.VarChar(50)
  departemen_id       String?   @db.Uuid
  nik                 String?   @unique @db.VarChar(20)
  status_employees    String?   @db.Uuid

  user               users?               @relation("employees_user_idTousers", fields: [user_id], references: [id])
  users              users[]              @relation("users_employee_idToemployees")
  attendance_records attendance_records[]
  leave_quotas       leave_quotas[]
  leave_requests     leave_requests[]
  payrolls           payrolls[]
  izin_sakit         izin_sakit[]
  salary             salary?
  departemen         departemen? @relation(fields: [departemen_id], references: [id])
  statusJenis        jenis_status_employees? @relation(fields: [status_employees], references: [id])
}

model jenis_status_employees {
  id         String     @id @default(uuid()) @db.Uuid
  name       String     @unique @db.VarChar(50)
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  employees  employees[]
}

model attendance_records {
  id             String    @id @default(uuid()) @db.Uuid
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  employee_id    String    @db.Uuid
  date           DateTime  @db.Date
  check_in_time  DateTime? @db.Timestamptz(6)
  check_out_time DateTime? @db.Timestamptz(6)
  status         String    @db.VarChar(50)
  notes          String?
  employee       employees @relation(fields: [employee_id], references: [id])
}

model leave_quotas {
  id          Int       @id @default(autoincrement())
  employee_id String    @db.Uuid
  quota_type  String    @default("tahunan") @db.VarChar(50)
  year        Int
  total_quota Int
  used_quota  Int       @default(0)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  employee    employees @relation(fields: [employee_id], references: [id])
}

model leave_requests {
  id               String    @id @default(uuid()) @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  employee_id      String    @db.Uuid
  leave_type       String    @db.VarChar(50)
  start_date       DateTime  @db.Date
  end_date         DateTime  @db.Date
  reason           String
  status           String    @default("PENDING") @db.VarChar(50)
  requested_date   DateTime  @default(now()) @db.Date
  approved_by      String?   @db.Uuid
  rejection_reason String?
  rejected_by      String?   @db.Uuid
  rejected_at      DateTime? @db.Timestamptz(6)

  employee       employees @relation(fields: [employee_id], references: [id], map: "leave_requests_employee_id_fkey")
  approvedByUser users?    @relation("ApprovedByUser", fields: [approved_by], references: [id], map: "leave_requests_approved_by_fkey")
  rejectedByUser users?    @relation("RejectedByUser", fields: [rejected_by], references: [id], map: "leave_requests_rejected_by_fkey")
}

model payrolls {
  id               String    @id @default(uuid()) @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  employee_id      String    @db.Uuid
  pay_period_start DateTime  @db.Date
  pay_period_end   DateTime  @db.Date
  basic_salary     Decimal?  @db.Decimal(15, 2)
  gross_salary     Decimal   @db.Decimal(15, 2)
  net_salary       Decimal   @db.Decimal(15, 2)
  payment_date     DateTime? @db.Date
  status           String    @default("PENDING") @db.VarChar(20)
  
  // Tunjangan dari Data Salary
  position_allowance     Decimal? @db.Decimal(15, 2)
  management_allowance   Decimal? @db.Decimal(15, 2)
  phone_allowance        Decimal? @db.Decimal(15, 2)
  incentive_allowance    Decimal? @db.Decimal(15, 2)
  overtime_allowance     Decimal? @db.Decimal(15, 2)
  total_allowances       Decimal? @db.Decimal(15, 2)
  
  // Komponen Payroll yang Dihitung - Perusahaan (PENDAPATAN TETAP)
  bpjs_health_company    Decimal? @db.Decimal(15, 2)
  jht_company            Decimal? @db.Decimal(15, 2)
  jkk_company            Decimal? @db.Decimal(15, 2)
  jkm_company            Decimal? @db.Decimal(15, 2)
  jp_company             Decimal? @db.Decimal(15, 2)
  subtotal_company       Decimal? @db.Decimal(15, 2)  // SUB TOTAL (Perusahaan)
  
  // Komponen Payroll yang Dihitung - Karyawan (POTONGAN)
  bpjs_health_employee   Decimal? @db.Decimal(15, 2)
  jht_employee           Decimal? @db.Decimal(15, 2)
  jp_employee            Decimal? @db.Decimal(15, 2)
  subtotal_employee      Decimal? @db.Decimal(15, 2)  // SUB TOTAL (Potongan Karyawan)
  
  // Pajak (di-nonaktifkan)
  
  // Deductions Manual
  kasbon                 Decimal? @db.Decimal(15, 2)
  telat                  Decimal? @db.Decimal(15, 2)
  angsuran_kredit        Decimal? @db.Decimal(15, 2)
  
  // Total Deductions
  total_deductions       Decimal? @db.Decimal(15, 2)
  
  // Total Pendapatan (Gaji + Tunjangan + BPJS Perusahaan)
  total_pendapatan       Decimal? @db.Decimal(15, 2)
  
  // Legacy field (untuk backward compatibility)
  deductions             Decimal? @db.Decimal(15, 2)
  
  // Additional fields
  created_by             String?  @db.Uuid
  approved_by            String?  @db.Uuid
  approved_at            DateTime? @db.Timestamptz(6)
  updated_at             DateTime? @db.Timestamptz(6)
  
  // Field yang hilang dari schema sebelumnya
  bpjs_employee          Decimal? @db.Decimal(15, 2)
  bpjs_company           Decimal? @db.Decimal(15, 2)
  jkk                    Decimal? @db.Decimal(15, 2)
  jkm                    Decimal? @db.Decimal(15, 2)
  
  employee               employees @relation(fields: [employee_id], references: [id])
}

model session {
  id        String   @id @default(uuid())
  user_id   String   @db.Uuid
  expiresAt DateTime
  user      users    @relation(fields: [user_id], references: [id])
}

model system_logs {
  id                String    @id @default(uuid()) @db.Uuid
  event_type        String    @db.VarChar(50)
  event_description String
  user_id           String?   @db.Uuid
  ip_address        String?
  user_agent        String?
  severity          String?   @default("INFO") @db.VarChar(20)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  user              users?    @relation("UserSystemLogs", fields: [user_id], references: [id])
}

model system_settings {
  id            String    @id @default(uuid()) @db.Uuid
  setting_key   String    @unique @db.VarChar(100)
  setting_value String?
  setting_type  String?   @default("string") @db.VarChar(50)
  description   String?
  updated_by    String?   @db.Uuid
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  user          users?    @relation("UserSystemSettings", fields: [updated_by], references: [id])
}

model izin_sakit {
  id          String    @id @default(uuid()) @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  employee_id String    @db.Uuid
  tanggal     DateTime  @db.Date
  jenis       String    @db.VarChar(50)
  alasan      String
  file_path   String?   @db.Text
  status      String    @default("PENDING") @db.VarChar(50)
  approved_by String?   @db.Uuid
  approved_at DateTime? @db.Timestamptz(6)
  rejected_by String?   @db.Uuid
  rejected_at DateTime? @db.Timestamptz(6)
  keterangan  String?
  employee    employees @relation(fields: [employee_id], references: [id])
}

model department_nik_config {
  id                String    @id @default(uuid()) @db.Uuid
  created_at        DateTime  @default(now()) @db.Timestamptz(6)
  updated_at        DateTime  @updatedAt @db.Timestamptz(6)
  department_id     String    @db.Uuid
  department_name   String    @db.VarChar(100)
  prefix            String    @db.VarChar(10)
  current_sequence  Int       @default(1)
  sequence_length   Int       @default(3)
  format_pattern    String    @db.VarChar(50)
  is_active         Boolean   @default(true)

  departemen departemen @relation(fields: [department_id], references: [id], onDelete: Cascade)

  @@unique([department_id])
}

model payroll_components {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  type        String   @db.VarChar(50)
  category    String   @db.VarChar(50)
  percentage  Decimal  @default(0) @db.Decimal(5, 2)
  amount      Decimal  @default(0) @db.Decimal(12, 2)
  is_active   Boolean  @default(true)
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @updatedAt @db.Timestamptz(6)

  @@index([type])
  @@index([category])
  @@index([is_active])
}

model salary {
  id                    String   @id @default(uuid()) @db.Uuid
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  updated_at            DateTime @updatedAt @db.Timestamptz(6)
  employee_id           String   @unique @db.Uuid
  nik                   String   @unique @db.VarChar(50)
  basic_salary          Decimal  @db.Decimal(15, 2)
  position_allowance    Decimal? @db.Decimal(15, 2)
  management_allowance  Decimal? @db.Decimal(15, 2)
  phone_allowance       Decimal? @db.Decimal(15, 2)
  incentive_allowance   Decimal? @db.Decimal(15, 2)
  overtime_allowance    Decimal? @db.Decimal(15, 2)
  
  employee employees @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@index([employee_id])
  @@index([nik])
}
